---
import { screen_themes } from '../util/const'

type link = {
	label: string;
	href?: string;
	nested? : [link, ...link[]];
};

const home_links: link[] = [
	{
		label : 'Inicio',
		href : '/#',
	},
	{
		label : 'Blog',
		nested : [
			{
				label : 'Todos los posts',
				href : '/blog',
			},
			{
				label : 'tutorial de layout',
				nested : [
					{
						label : 'Template de variables CSS',
						href : '/blog/post-1',
					},
					{
						label : 'Consejos de sem√°ntica',
						href : '/blog/post-2',
					},
					{
						label : 'Clases de CSS',
						href : '/blog/post-3',
					},
				]
			},
		]
	}
];
---

<header>
	<nav class="c-lay-nav">
		<div>
			<label class="c-nav-btn c-gen-nav-toggler">
				<input type="checkbox" aria-hidden="true" class="sr-only"/>

				<svg  xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
					<g class="c-tool-icon" data-toggle="open">
						<path d="M4 6l16 0" />
						<path d="M4 12l16 0" />
						<path d="M4 18l16 0" />
					</g>
					<g class="c-tool-icon" data-toggle="shut">
						<path d="M18 6l-12 12" />
						<path d="M6 6l12 12" />
					</g>
				</svg>
			</label>

			<div class="c-gen-frame-links">
				{
					(function() {
						function renderlinks( l : link[], level = 0 ) {
							return <ul class="c-ul-link" data-level={ level }>
								{l.map(e => e.nested ?
									(<li >
										<label >
											<input
												type="checkbox" name={`level-${level}`}
												class="sr-only" aria-hidden="true"/>			
											<span class="c-tool-icon" data-toggle="open" role="img">{e.label} &#8801;</span>
											<span class="c-tool-icon" data-toggle="shut" role="img">{e.label} &#215;</span>
										</label>
										{renderlinks(e.nested, level + 1)}
									</li>) :
									(<li><a href={e.href}> {e.label} </a></li>) 
								)}
								
								<script is:inline define:vars={{ level }}>
									document.scripts[document.scripts.length - 1].parentElement.querySelectorAll(`input[name="level-${level}"]`).forEach(i => i.addEventListener('click', function({ target : e}) {
										for (const i of e.closest('ul').querySelectorAll(`input`)) 
											if(i !== e) 
												i.checked = false;
									}));
								</script>
							</ul>
						}
						return renderlinks(home_links)
					})()
				}
			</div>

			<button class="c-nav-btn c-gen-theme-toggler">
				
				<svg  xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<g class="th-visible" data-theme="light" stroke-width="0" stroke="none" fill="currentColor">
						<path d="M12 19a1 1 0 0 1 .993 .883l.007 .117v1a1 1 0 0 1 -1.993 .117l-.007 -.117v-1a1 1 0 0 1 1 -1z" />
						<path d="M18.313 16.91l.094 .083l.7 .7a1 1 0 0 1 -1.32 1.497l-.094 -.083l-.7 -.7a1 1 0 0 1 1.218 -1.567l.102 .07z" />
						<path d="M7.007 16.993a1 1 0 0 1 .083 1.32l-.083 .094l-.7 .7a1 1 0 0 1 -1.497 -1.32l.083 -.094l.7 -.7a1 1 0 0 1 1.414 0z" />
						<path d="M4 11a1 1 0 0 1 .117 1.993l-.117 .007h-1a1 1 0 0 1 -.117 -1.993l.117 -.007h1z" />
						<path d="M21 11a1 1 0 0 1 .117 1.993l-.117 .007h-1a1 1 0 0 1 -.117 -1.993l.117 -.007h1z" />
						<path d="M6.213 4.81l.094 .083l.7 .7a1 1 0 0 1 -1.32 1.497l-.094 -.083l-.7 -.7a1 1 0 0 1 1.217 -1.567l.102 .07z" />
						<path d="M19.107 4.893a1 1 0 0 1 .083 1.32l-.083 .094l-.7 .7a1 1 0 0 1 -1.497 -1.32l.083 -.094l.7 -.7a1 1 0 0 1 1.414 0z" />
						<path d="M12 2a1 1 0 0 1 .993 .883l.007 .117v1a1 1 0 0 1 -1.993 .117l-.007 -.117v-1a1 1 0 0 1 1 -1z" />
						<path d="M12 7a5 5 0 1 1 -4.995 5.217l-.005 -.217l.005 -.217a5 5 0 0 1 4.995 -4.783z" />
					</g>
					<g class="th-visible" data-theme="dark" stroke-width="0" fill="currentColor">
						<path d="M12 1.992a10 10 0 1 0 9.236 13.838c.341 -.82 -.476 -1.644 -1.298 -1.31a6.5 6.5 0 0 1 -6.864 -10.787l.077 -.08c.551 -.63 .113 -1.653 -.758 -1.653h-.266l-.068 -.006l-.06 -.002z"  />
					</g>
				</svg>


				<script is:inline define:vars={{ e_th : screen_themes }}>
					document.scripts[document.scripts.length - 1].parentElement.addEventListener("click", () => localStorage.setItem("theme", document.documentElement.classList.toggle("dark") ? e_th.d : e_th.l));
				</script>
			</button>
			
		</div>
	</nav>
</header>

<style is:global>
*:target::before {
	content: "";
	display: block;
	height: 4rem; /* fixed header height*/
	margin: -4rem 0 0; /* negative fixed header height */
}
</style>
<style>
	header {
		--emphasis : #89d8;

		z-index: 10	;
		position: sticky;
		top: calc(var(--hsize, 0rem) * -1 - 1rem);
		background-color: var(--panel-color);
	}
	.c-lay-nav {
		& {
			height: 4rem;
			display: flex;
			flex-direction: column;
			justify-content: center;
			position: sticky;
			top : 0;
		}

		& > div:only-child {
			padding-inline : 3rem;
			display: flex;
			gap: .5rem;
			align-items: stretch;
			justify-content: center;
			position: sticky;

			top : 0;
			height: 3rem;
		}

		@media (width <= 768px) {
			& > div:only-child { justify-content: flex-end; }
		}

		& ul.c-ul-link { 
			& {
				margin: 0;
				padding: 0;

				list-style: none;
				display: flex;
				flex-direction: column;

				line-height: 1;
				
				background-color: #6663;
				color: var(--hierarchy-1);
			}

			&:has(.c-ul-link) > li {
				position: relative;
			}

			& a, label {
				& {
					display: block;
					height: 100%;
					color : var(--hierarchy-1);
					text-decoration: none;
					
					padding: .5rem 1.25rem;
					cursor: pointer;

					transition: 
						background-color .1s,
						color .1s;
				}

				&:hover, &:focus-within { 
					background-color: var(--emphasis);
					color : var(--hierarchy-0);
					transition: 
						background-color .3s,
						color .3s;
				}
				&:focus-within { outline: medium auto; }
			}

			& label:has(+ ul.c-ul-link):has(> input:where([type="checkbox"],[type="radio"]):not(:checked)) {
				& {}
				& > .c-tool-icon[data-toggle="shut"] { display: none; }
				& + ul.c-ul-link { display: none; }
			}
			& label:has(+ ul.c-ul-link):has(> input:where([type="checkbox"],[type="radio"]):checked) {
				& { background-color: var(--emphasis); }
				& > .c-tool-icon[data-toggle="open"] { display: none; }
			}
		}

		& .c-nav-btn {
			& {
				border: 1px solid var(--emphasis);
				background-color: transparent;
				color: currentColor;
			}
			
			&:hover { background-color: var(--emphasis); }
			&:active {
				border-color: var(--hierarchy-3);
				background-color: var(--hierarchy-3);
			}
		}

		& .c-gen-theme-toggler { 
			& {
				aspect-ratio: 1 / 1; 
				display: grid;
				place-items: center;

				width: 2.25rem;

				align-self: center; 
				border-radius: 50%; 
				line-height: 1; 
			}
		}

		& .c-gen-nav-toggler {
			& {
				& {
					display: grid;
					place-items: center;
					align-self: center; 

					padding-inline: 9px;
					aspect-ratio: 1;

					line-height: 1; 

					border-radius: 0.375rem; 
				}
			}

			&:has(> input[type="checkbox"]:not(:checked)) .c-tool-icon[data-toggle="shut"] { display: none; }
			&:has(> input[type="checkbox"]:checked) 		 .c-tool-icon[data-toggle="open"] { display: none; }
			

			@media (width <= 768px) {
				& { order: 1; }
				&:has(> input[type="checkbox"]:not(:checked)) + .c-gen-frame-links { display: none; }
			}
			
			@media (width > 768px) {
				& { display: none; }
			}
		}

		& div.c-gen-frame-links {
			& { display: contents; }

			@media (width <= 768px) {
				& > ul.c-ul-link {
					min-width: 16rem;
					position: absolute;
					top : calc(100% + 1rem);
					right: 1rem;

					border-radius: .5rem;
					background-color: var(--panel-color);
					border: 1px solid currentColor;
					padding: .5rem 0;
				}
			}

			@media (width > 768px) {
				& > ul.c-ul-link {
					background-color: var(--panel-color);
					flex-direction: row;
					background-color: transparent;
				}
				& > ul.c-ul-link > li > :where(a, label) {
					padding-block: 0;
					display: flex;
					align-items: center;
					gap : 2px;
				}
				& > ul.c-ul-link > li > ul.c-ul-link  {
					position: absolute;
					min-width: 16rem;

					top : calc(100% + 1rem);
					left : 50%;
					translate : -50% 0;

					width: max-content;

					border-radius: .5rem;
					background-color: var(--panel-color);
					border: 1px solid currentColor;
					padding: .5rem 0;
				}
			}
		}
	}
</style>