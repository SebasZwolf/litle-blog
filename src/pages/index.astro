---
import {
	SITE_TITLE as title,
	SITE_DESCRIPTION as description,
} from "../util/const";

import OpenGraph from "../fragments/OpenGraph.astro";
import Layout from "../layouts/index.astro";
import Content from "../layouts/content.astro";

import Time from "../components/Time.astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import Icons from "../fragments/Icons.astro";

const s_postImg = 96;

const posts = await getCollection("blog").then((ps) =>
	ps.sort((a, b) => a.data.datePub.valueOf() - b.data.datePub.valueOf()),
);

const base = import.meta.env.BASE_URL;
---

<Layout {title} {description}>
	<Fragment slot="head">
		<OpenGraph
			{...{ title, description, image: base + "/public/favicon.svg" }}
		/>
	</Fragment>
	<Fragment>
		<Content>
			<header style="margin-block: 1em;">
				<h1>Hola, soy Sebas</h1>
			</header>
			<Icons />
			<section style="margin-block: 0 2.5rem">
				<header style="margin-block: 1em;">
					<h2>Y este es mi blog</h2>
				</header>
				<p style="max-width: 72ch;">
					Mi nombre es Sebastian Rodríguez. Creé este blog para enseñar como a
					desarrollar páginas web usando trucos y practicas que aprendí a lo
					largo del tiempo.
				</p>
				<p style="max-width: 72ch;">
					Aquí aprenderas como crear elementos de UI básicos, como crear
					layouts, componentes y otras estructuras usando principalmente CSS,
					así como la forma en la que organizo mi código para mayor facilidad al
					leer, consumir y refactorizar.
				</p>
				<p style="max-width: 72ch;">
					Los frameworks que yo uso principalmente son Astro, Vue y Tailwind,
					pero en la mayoría de guias que verás aquí, el uso de javascript (de
					frameworks y la misma vanilla js) se mantiene al mínimo, pues el
					objetivo es aprovechar al máximo las herramientas del vanilla css.
				</p>
				<p style="max-width: 72ch;">
					Dentro de estos tutoriales explicaré también como puedes crear un blog
					como este.
				</p>
			</section>

			<section style="margin-block: 2.5rem">
				<header style="margin-block: 1em">
					<h2 style="margin-bottom: 0;">Últimos Articulos</h2>
					<small style="color: var(--hierarchy-1)"
						><a href={base + "/blog"}>ver todos</a></small
					>
				</header>

				<ul class="ul-post-list-lite">
					{
						posts.map((p) => (
							<li>
								<a href={base + `/blog/${p.slug}`}>
									<article
										class="article-post-card-lite"
										style={`--img-size: ${s_postImg}px`}
									>
										<picture style="height: 100%; border-radius: 50%;">
											{p.data.thumbnail && (
												<Image
													style="display: block; overflow: hidden; width: 100%; height: 100%; object-fit: cover;"
													src={p.data.thumbnail?.img}
													alt={p.data.thumbnail?.alt}
													width={s_postImg}
													height={s_postImg}
												/>
											)}
										</picture>

										<header>
											<div style="margin-block: .5rem;">
												<ul class="ul-tag-list-lite">
													{p.data.tags.map((t) => (
														<li style={`--icon-color : ${t[1].color}`}>
															<svg viewBox="0 -1 24 24">
																<use href={`#icon-tag-${t[0]}`} />
															</svg>
															<div>
																<span>{t[1].label}</span>
															</div>
														</li>
													))}
												</ul>
											</div>
											<h3>{p.data.title}</h3>
											<Time date={p.data.datePub} format={{ month: "long" }} />
										</header>
									</article>
								</a>
							</li>
						))
					}
				</ul>
			</section>
		</Content>
	</Fragment>
</Layout>

<style>
	ul.ul-post-list-lite {
		& {
			list-style: none;
			padding: 0;
			display: flex;
			flex-direction: column;
			gap: 0.5rem;
		}
		& > li {
			display: block;
			max-width: 72ch;
		}
	}

	article.article-post-card-lite {
		& {
			padding: 0.5rem;

			display: grid;
			grid-template-areas: "picture header";

			grid-template-columns: var(--img-size) 1fr;
			grid-template-rows: var(--img-size);

			gap: 0.75rem;
			align-items: center;
		}
		&:hover {
			background-color: var(--hierarchy-3);
		}

		& > picture {
			grid-area: picture;
			overflow: hidden;
		}
		& > header {
			& {
				line-height: 1;
				grid-area: header;
			}
			& > :first-child {
				margin-block: 0.25rem;
			}
			& > :global(:last-child) {
				margin-block: 0.25rem;
				font-size: small;
				line-height: 1;
				color: var(--hierarchy-1);
			}
		}

		& > p {
			grid-area: content;
			margin: 0;
			text-wrap: pretty;
			overflow: hidden;
		}

		& ul.ul-tag-list-lite {
			& {
				display: flex;
				padding: 0;
				list-style: none;
				gap: 0.25rem;
				margin-bottom: 0.5rem;
			}

			& > li {
				line-height: 1;
				color: var(--hierarchy-s);
				padding: 0.25rem;
				background-color: color-mix(
					in srgb,
					var(--icon-color),
					transparent 50%
				);

				border-radius: 100vw;
				font-size: small;

				display: flex;
				align-items: center;
			}
			& > li > svg {
				width: 16px;
				aspect-ratio: 1;
			}

			& > li > div {
				display: grid;
				transition:
					grid-template-columns 0.3s,
					padding-right 0.3s;
				grid-template-columns: 0fr;
				overflow: hidden;
			}
			& > li:hover > div {
				grid-template-columns: 1fr;
				padding-right: 0.25rem;
			}
			& > li > div > span {
				overflow: hidden;
				line-height: 1.25;
				text-transform: lowercase;
			}
		}
	}
</style>
